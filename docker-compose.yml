version: '3.8'

volumes:
  mysql_data:
  uploads_data:

services:
  gemini-proxy-ts:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gemini-proxy-ts
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:8000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  mysql:
    image: mysql:8
    container_name: gemini-proxy-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-your_root_password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-gemini_proxy}
      MYSQL_USER: ${MYSQL_USER:-gemini}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=1000

  # Optional: Redis for caching (if needed in future)
  # redis:
  #   image: redis:7-alpine
  #   container_name: gemini-proxy-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3